{"version":3,"sources":["firebase-config.js","components/LogIn.js","components/Header.js","functions/sorts.js","components/Sortbar.js","functions/formatNumber.js","functions/getElapsedTime.js","components/PostBox.js","components/Home.js","components/Search.js","components/Footer.js","functions/secondsToDate.js","components/SubSidebar.js","components/subredditContext.js","components/Subreddit.js","components/Submit.js","components/Reply.js","components/Comment.js","components/Comments.js","components/Post.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LogIn","setLogInForm","setSignUpForm","logIn","nightMode","useState","email","username","password","confirmPassword","form","setForm","handleChange","event","target","name","value","setError","message","errorMsg","document","querySelector","submitBtn","createElement","classList","add","parentNode","insertBefore","innerHTML","className","onClick","type","placeholder","onChange","checkUsername","a","db","getFirestore","q","query","collection","where","getDocs","querySnapshot","empty","forEach","doc","data","Error","auth","getAuth","signInWithEmailAndPassword","then","catch","error","code","console","log","createAccount","addDoc","upvoted","downvoted","createUserWithEmailAndPassword","Header","user","setNightMode","searchInput","setSearchInput","logInForm","signUpForm","dropdown","setDropdown","navigate","useNavigate","to","xmlns","viewBox","fill","cx","cy","r","d","onKeyDown","keyCode","body","remove","signOut","getDocId","currentUser","docId","id","deleteDocFields","docRef","updateDoc","deleteField","deleteDocument","deleteDoc","deleteUser","sortByHot","array","sortByDateNew","date","Date","array1","array2","p","getTime","seconds","push","sortByTop","concat","slice","sort","b","upvotes","downvotes","Sortbar","posts","setPosts","comments","setComments","sortTypePosts","setSortTypePosts","sortTypeComments","setSortTypeComments","postsArray","resultA","sortByDateOld","comment","totalReplies","replies","length","loopReplies","branch","reply","sortByControversial","formatNumber","num","Math","abs","toFixed","getElapsedTime","startTime","elapsedTime","secondsPerYear","secondsPerMonth","secondsPerDay","now","years","floor","months","days","hours","minutes","PostBox","setUser","propSlug","post","setPost","activeFlairs","pickFlair","postPage","slug","useParams","setUpvoted","setDownvoted","deleted","setDeleted","useEffect","includes","vote","direction","postRef","userRef","upvotedClone","downvotedClone","index","indexOf","splice","newUpvotes","newDownvotes","temp","author","flairs","map","flair","i","title","text","subreddit","Home","getPosts","href","Search","searchQuery","Footer","secondsToDate","year","getFullYear","month","getMonth","day","getDate","SubSidebar","colors","description","members","color","created","style","background","state","SubredditContext","React","createContext","Subreddit","banner","icon","setSubreddit","setActiveFlairs","LightBlue","DarkBlue","getSubreddit","getDoc","docSnap","exists","postsRef","querySnap","backgroundImage","backgroundColor","url","alt","postFlairs","f","hasActiveFlair","Provider","Submit","setTitle","setText","useLocation","submitPost","Reply","parent","setReply","submitReply","parentId","postId","querySelectorAll","replyInput","Comment","collapsed","setCollapsed","showCommentsReply","setShowCommentsReply","commentRef","c","Comments","allComments","getComments","commentsRef","commentsArray","addReplies","allComment","Post","postSubreddit","useContext","getPost","App","firebaseAppConfig","getFirebaseConfig","initializeApp","onAuthStateChanged","userAuth","getUser","exact","path","element","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8fe913cf.chunk.js","sourcesContent":["// Firebase Configuration\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyDVf2ofyD_gruQEYKvwsTnjF5B55bqtswE\",\n\tauthDomain: \"fakeddit-c2fc2.firebaseapp.com\",\n\tprojectId: \"fakeddit-c2fc2\",\n\tstorageBucket: \"fakeddit-c2fc2.appspot.com\",\n\tmessagingSenderId: \"615056824169\",\n\tappId: \"1:615056824169:web:929502b979e546b2f80ff8\"\n};\n\nexport function getFirebaseConfig() {\n\tif (!firebaseConfig || !firebaseConfig.apiKey) {\n\t\tthrow new Error('No Firebase configuration object provided.');\n\t} else {\n\t\treturn firebaseConfig;\n\t}\n}","import React, { useState } from \"react\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\nimport \"../styles/LogIn.css\";\n\nconst LogIn = ({setLogInForm, setSignUpForm, logIn, nightMode}) => {\n    const [form, setForm] = useState({\n        email: '',\n        username: '',\n        password: '',\n        confirmPassword: '',\n    });\n\n    const handleChange = event => {\n        setForm({\n            ...form,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const processLogIn = () => {\n        // Check if username exists\n        const checkUsername = async () => {\n            const db = getFirestore();\n            const q = query(collection(db, \"users\"), where(\"username\", \"==\", form.username));\n            const querySnapshot = await getDocs(q);\n\n            if (!querySnapshot.empty) {\n                let email = '';\n                querySnapshot.forEach((doc) => {\n                    email = doc.data().email;\n                });\n\n                return email;\n            } else {\n                throw new Error('Invalid username');\n            }\n        };\n\n        // Log in\n        const logIn = async (email, password) => {\n            const auth = getAuth();\n            signInWithEmailAndPassword(auth, email, password)\n            .then(() => {\n                setLogInForm(false);\n            })\n            .catch((error) => {\n                if (error.code === 'auth/wrong-password') {\n                    setError('Wrong password.');\n                }\n                console.log(error);\n            });\n        };\n\n        // Check if any field is empty\n        if (form.username === '' || form.password === '') {\n            setError('All fields required.');\n        } else {\n            checkUsername()\n            .then((email) => {\n                logIn(email, form.password);\n            })\n            .catch((error) => {\n                setError(error.message);\n            });\n        }\n    };\n\n    const processSignUp = () => {\n        // Check if username exists\n        const checkUsername = async () => {\n            const db = getFirestore();\n            const q = query(collection(db, \"users\"), where(\"username\", \"==\", form.username));\n            const querySnapshot = await getDocs(q);\n\n            if (!querySnapshot.empty) {\n                throw new Error('Username already exists.');\n            }\n        };\n\n        // Create Account\n        const createAccount = async () => {\n            const db = getFirestore();\n            await addDoc(collection(db, \"users\"), {\n                email: form.email,\n                username: form.username,\n                password: form.password,\n                upvoted: [],\n                downvoted: []\n            });\n        };\n\n        // Check if any field is empty and if passwords match\n        if (form.email === '' || form.username === '' || form.password === '' || form.confirmPassword === '') {\n            setError('All fields required.');\n        } else if (form.password !== form.confirmPassword) {\n            setError('Passwords do not match.');\n        } else {\n            checkUsername()\n            .then(() => {\n                // Create Auth Account\n                const auth = getAuth();\n                createUserWithEmailAndPassword(auth, form.email, form.password)\n                .then(createAccount)\n                .then(() => { setSignUpForm(false); })\n                .catch((error) => {\n                    if (error.code === 'auth/weak-password') {\n                        setError('Password must have at least 6 characters.');\n                    } else if (error.code === 'auth/invalid-email') {\n                        setError('Invalid email.');\n                    } else if (error.code === 'auth/email-already-in-use') {\n                        setError('Email in use.');\n                    }\n                    console.log(error);\n                });\n            })\n            .catch((error) => {\n                setError(error.message);\n                console.log(error);\n            });\n        }\n    };\n\n    const setError = message => {\n        let errorMsg = document.querySelector('.error-msg');\n        if (!errorMsg) {\n            const submitBtn = document.querySelector('.log-in-form-submit-btn');\n            errorMsg = document.createElement('div');\n            errorMsg.classList.add('error-msg');\n            submitBtn.parentNode.insertBefore(errorMsg, submitBtn);\n        }\n\n        errorMsg.innerHTML = message;\n    };\n\n    return (\n        <div className={!nightMode ? \"log-in\" : \"log-in log-in-dark\"}>\n            <div className=\"canvas log-in-canvas\" />\n            <div className=\"log-in-form-container\">\n                <div className=\"log-in-form-close\">\n                    <div className=\"log-in-form-close-btn\" onClick={() => {\n                        logIn ? setLogInForm(false) : setSignUpForm(false);\n                    }} />\n                </div>\n                {logIn ?\n                <div className=\"log-in-form\">\n                    <h1>Login</h1>\n                    <div>By continuing, you agree to our <span className=\"link\">User Agreement</span> and <span className=\"link\">Privacy Policy</span>.</div>\n                    <input type=\"text\" name=\"username\" value={form.username} placeholder=\"Username\" onChange={handleChange} />\n                    <input type=\"text\" name=\"password\" value={form.password} placeholder=\"Password\" onChange={handleChange} />\n                    <button className=\"log-in-form-submit-btn\" onClick={processLogIn}>Log In</button>\n                    <div className=\"log-in-form-bottom\">\n                        <div>Forgot your <span className=\"link\">username</span> or <span className=\"link\">password</span>?</div>\n                        <div>New to Fakeddit? <span className=\"link\" onClick={() => {\n                            setLogInForm(false);\n                            setSignUpForm(true);\n                        }}>SIGN UP</span></div>\n                    </div>\n                </div>\n                :\n                <div className=\"log-in-form\">\n                    <h1>Sign up</h1>\n                    <div>By continuing, you are setting up a Fakeddit account and agree to our <span className=\"link\">User Agreement</span> and <span className=\"link\">Privacy Policy</span>.</div>\n                    <input type=\"text\" name=\"email\" value={form.email} placeholder=\"Email\" onChange={handleChange} />\n                    <input type=\"text\" name=\"username\" value={form.username} placeholder=\"Username\" onChange={handleChange} />\n                    <input type=\"text\" name=\"password\" value={form.password} placeholder=\"Password\" onChange={handleChange} />\n                    <input type=\"text\" name=\"confirmPassword\" value={form.confirmPassword} placeholder=\"Confirm Password\" onChange={handleChange} />\n                    <button className=\"log-in-form-submit-btn\" onClick={processSignUp}>Continue</button>\n                    <div className=\"log-in-form-bottom\">\n                        <div>Already a Fakedditor? <span className=\"link\" onClick={() => {\n                            setLogInForm(true);\n                            setSignUpForm(false);\n                        }}>LOG IN</span></div>\n                    </div>\n                </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default LogIn;","import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { getAuth, signOut, deleteUser } from \"firebase/auth\";\nimport { getFirestore, collection, query, where, getDocs, doc, deleteDoc, updateDoc, deleteField } from \"firebase/firestore\";\nimport LogIn from \"./LogIn\";\nimport '../styles/Header.css';\n\nconst Header = ({user, nightMode, setNightMode}) => {\n\tconst [searchInput, setSearchInput] = useState('');\n\tconst [logInForm, setLogInForm] = useState(false);\n\tconst [signUpForm, setSignUpForm] = useState(false);\n\tconst [dropdown, setDropdown] = useState(false);\n\tconst navigate = useNavigate();\n\n\tconst handleInput = (event) => {\n\t\tsetSearchInput(event.target.value);\n\t};\n\n\tconst submitSearch = (event) => {\n\t\tif (event.keyCode === 13) {\n\t\t\tnavigate(\"/search/\" + searchInput);\n\t\t}\n\t};\n\n\tconst logOut = () => {\n\t\tconst auth = getAuth();\n\t\tsignOut(auth).then(() => {\n\t\t\tsetDropdown(false);\n\t\t}).catch((error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\t};\n\n\tconst deleteAccount = () => {\n\t\tconst db = getFirestore();\n\t\tconst auth = getAuth();\n\n\t\t// Get Document id of user\n\t\tconst getDocId = async () => {\n\t\t\tconst q = query(collection(db, \"users\"), where(\"email\", \"==\", auth.currentUser.email));\n\t\t\tconst querySnapshot = await getDocs(q);\n\t\t\tlet docId = '';\n\t\t\tquerySnapshot.forEach((doc) => {\n\t\t\t\tdocId = doc.id;\n\t\t\t});\n\n\t\t\treturn docId;\n\t\t}\n\n\t\t// Delete Fields from Document\n\t\tconst deleteDocFields = async (id) => {\n\t\t\tconst docRef = doc(db, \"users\", id);\n\t\t\tawait updateDoc(docRef, {\n\t\t\t\temail: deleteField(),\n\t\t\t\tusername: deleteField(),\n\t\t\t\tpassword: deleteField(),\n\t\t\t\tupvoted: deleteField(),\n\t\t\t\tdownvoted: deleteField()\n\t\t\t});\n\t\t};\n\n\t\t// Delete Document\n\t\tconst deleteDocument = async (id) => {\n\t\t\tconst docRef = doc(db, \"users\", id);\n\t\t\tawait deleteDoc(docRef);\n\t\t};\n\n\t\t// Delete Account\n\t\tgetDocId()\n\t\t.then((id) => {\n\t\t\tdeleteDocFields(id)\n\t\t\t.then(() => { deleteDocument(id) })\n\t\t\t.then(() => { deleteUser(auth.currentUser) })\n\t\t\t.then(() => {\n\t\t\t\tsetDropdown(false);\n\t\t\t\tconsole.log('Successfully deleted account');\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t});\n\t}\n\n\tconst toggleNightMode = () => {\n\t\tif (!nightMode) {\n\t\t\tdocument.body.classList.add('body-dark');\n\t\t\tsetNightMode(true);\n\t\t} else {\n\t\t\tdocument.body.classList.remove('body-dark');\n\t\t\tsetNightMode(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={!nightMode ? \"header\" : \"header header-dark\"}>\n\t\t\t{dropdown ?\n\t\t\t\t<div className=\"canvas\" onClick={() => {setDropdown(false)}} />\n\t\t\t: null}\n\t\t\t<div className=\"header-left\">\n\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" className=\"logo\">\n\t\t\t\t\t\t<g>\n\t\t\t\t\t\t\t<circle fill=\"#FF4500\" cx=\"10\" cy=\"10\" r=\"10\"></circle>\n\t\t\t\t\t\t\t<path fill=\"#FFFFFF\" d=\"M6.83 8.24h1.64V6.65A4.26 4.26 0 0 1 9 4.19 2.92 2.92 0 0 1 11.54 3a10.31 10.31 0 0 1 2.94.29l-.41 2.43a5.54 5.54 0 0 0-1.32-.2 1 1 0 0 0-1.21.87v1.85h2.62L14 10.61h-2.46v8.24H8.47v-8.24H6.83V8.24z\"></path>\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</svg>\n\t\t\t\t</Link>\n\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t<div className=\"header-title\">fakeddit</div>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<div className=\"header-center\">\n\t\t\t\t<div className=\"search-box\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<input className=\"search-field\" type=\"search\" placeholder=\"Search Fakeddit\" onChange={handleInput} onKeyDown={submitSearch}></input>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"header-right\">\n\t\t\t\t{!user ?\n\t\t\t\t<div className=\"header-btns-container\">\n\t\t\t\t\t<button className=\"header-btn login-btn\" onClick={() => {setLogInForm(true)}}>Log In</button>\n\t\t\t\t\t<button className=\"header-btn signup-btn\" onClick={() => {setSignUpForm(true)}}>Sign Up</button>\n\t\t\t\t</div>\n\t\t\t\t: null}\n\t\t\t\t<div className=\"user-btn\">\n\t\t\t\t\t<div className=\"user-dropdown-btn\" onClick={() => {setDropdown(true)}}></div>\n\t\t\t\t\t{dropdown ?\n\t\t\t\t\t\t<div className=\"user-dropdown-menu\">\n\t\t\t\t\t\t\t<div className=\"dropdown-header\">VIEW OPTIONS</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\" onClick={toggleNightMode}>\n\t\t\t\t\t\t\t\tNight Mode\n\t\t\t\t\t\t\t\t<button className=\"night-mode-btn\" type=\"button\">\n\t\t\t\t\t\t\t\t\t<div className=\"night-mode-btn-switch\" />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-header\">MORE STUFF</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\">Coins</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\">Premium</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\">Powerups</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\">Talk</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\">Predictions</div>\n\t\t\t\t\t\t\t<div className=\"dropdown-item\">Help Center</div>\n\t\t\t\t\t\t\t{user ?\n\t\t\t\t\t\t\t\t<div className=\"dropdown-item\" onClick={logOut}>Log Out</div>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div className=\"dropdown-item\" onClick={() => {\n\t\t\t\t\t\t\t\t\tsetDropdown(false);\n\t\t\t\t\t\t\t\t\tsetLogInForm(true);\n\t\t\t\t\t\t\t\t}}>Log In / Sign Up</div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{user ?\n\t\t\t\t\t\t\t\t<div className=\"dropdown-item\" onClick={deleteAccount}>Delete Account</div>\n\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t: null}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{logInForm ?\n\t\t\t\t<LogIn setLogInForm={setLogInForm} setSignUpForm={setSignUpForm} logIn={true} nightMode={nightMode} />\n\t\t\t: null}\n\t\t\t{signUpForm ?\n\t\t\t\t<LogIn setLogInForm={setLogInForm} setSignUpForm={setSignUpForm} logIn={false} nightMode={nightMode} />\n\t\t\t: null}\n\t\t</div>\n\t);\n}\n\nexport default Header;","/* Sort by hot\nSort by date (desc), split between recent (last 24 hrs) and old,\nthen sort recent by top (desc) */\nconst sortByHot = (array) => {\n    sortByDateNew(array);\n\n    const date = new Date();\n    const array1 = [];\n    const array2 = [];\n    array.forEach((p) => {\n        const deltaSeconds = (date.getTime() / 1000) - p.date.seconds;\n        const deltaHours = deltaSeconds / 60 / 60;\n        deltaHours <= 24 ? array1.push(p) : array2.push(p);\n    });\n\n    sortByTop(array1);\n    array = (array1.concat(array2)).slice();\n};\n\n// Sort by best (upvotes / downvotes) (desc)\nconst sortByBest = (array) => {\n    array.sort((a, b) => {\n        // Check for zero divisor\n        let resultA = (a.downvotes === 0) ? a.upvotes : a.upvotes / a.downvotes;\n        let resultB = (b.downvotes === 0) ? b.upvotes : b.upvotes / b.downvotes;\n\n        return resultB - resultA;\n    });\n};\n\n// Sort by top (votes) (desc)\nconst sortByTop = (array) => {\n    array.sort((a, b) => {\n        return (b.upvotes - b.downvotes) - (a.upvotes - a.downvotes);\n    });\n};\n\n// Sort by date (desc)\nconst sortByDateNew = (array) => {\n    array.sort((a, b) => {\n        return b.date - a.date;\n    });\n};\n\n// Sort by date (asc)\nconst sortByDateOld = (array) => {\n    array.sort((a, b) => {\n        return a.date - b.date;\n    });\n};\n\n// Sort by controversial (desc)\nconst sortByControversial = (array) => {\n    array.forEach((comment) => {\n        let totalReplies = comment.replies.length;\n\n        if (comment.replies > 0) {\n            const loopReplies = (branch) => {\n                branch.forEach((reply) => {\n                    totalReplies++;\n\n                    // If current comment has replies, recursively loop through each reply\n                    if (reply.replies.length > 0) {\n                        loopReplies(reply.replies);\n                    }\n                });\n            };\n\n            loopReplies(comment.replies);\n        }\n\n        // Temporarily add totalReplies property to comment\n        comment.totalReplies = totalReplies;\n    });\n\n    // Sort by totalReplies\n    array.sort((a, b) => {\n        return b.totalReplies - a.totalReplies;\n    });\n\n    // Delete totalReplies property from comments\n    array.forEach((comment) => {\n        delete comment.totalReplies;\n    });\n};\n\nexport {\n    sortByHot,\n    sortByBest,\n    sortByTop,\n    sortByDateNew,\n    sortByDateOld,\n    sortByControversial\n};","import React, { useState } from \"react\";\nimport { sortByHot, sortByBest, sortByTop, sortByDateNew, sortByDateOld, sortByControversial } from \"../functions/sorts\";\nimport \"../styles/Sortbar.css\";\n\nconst Sortbar = ({posts, setPosts, comments, setComments, nightMode}) => {\n    const [sortTypePosts, setSortTypePosts] = useState('hot');\n    const [sortTypeComments, setSortTypeComments] = useState('best');\n    const [dropdown, setDropdown] = useState(false);\n\n    const sort = (type) => {\n        let postsArray;\n        postsArray = posts ? posts.slice() : comments.slice();\n\n        if (type === 'hot') {\n            sortByHot(postsArray);\n            posts ? setSortTypePosts('hot') : setSortTypeComments('hot');\n        } else if (type === 'best'){\n            sortByBest(postsArray);\n            posts ? setSortTypePosts('best') : setSortTypeComments('best');\n        } else if (type === 'top') {\n            sortByTop(postsArray);\n            posts ? setSortTypePosts('top') : setSortTypeComments('top');\n        } else if (type === 'new') {\n            sortByDateNew(postsArray);\n            posts ? setSortTypePosts('new') : setSortTypeComments('new');\n        } else if (type === 'old') {\n            sortByDateOld(postsArray);\n            posts ? setSortTypePosts('old') : setSortTypeComments('old');\n        } else if (type === 'controversial') {\n            if (comments) {\n                sortByControversial(postsArray);\n                posts ? setSortTypePosts('controversial') : setSortTypeComments('controversial');\n            }\n        }\n\n        posts ? setPosts(postsArray) : setComments(postsArray);\n    };\n\n    return (\n        <div className={!nightMode ? \"sortbar\" : \"sortbar sortbar-dark\"}>\n        { posts ?\n            <div className=\"sortbar-posts\">\n                <div className={`sortbar-btn ${sortTypePosts === 'hot' ? `sortbar-btn-active` : ''}`} onClick={() => {\n                    if (sortTypePosts !== 'hot') {\n                        sort('hot');\n                    }\n                }}>Hot</div>\n                <div className={`sortbar-btn ${sortTypePosts === 'best' ? `sortbar-btn-active` : ''}`} onClick={() => {\n                    if (sortTypePosts !== 'best') {\n                        sort('best');\n                    }\n                }}>Best</div>\n                <div className={`sortbar-btn ${sortTypePosts === 'top' ? `sortbar-btn-active` : ''}`} onClick={() => {\n                    if (sortTypePosts !== 'top') {\n                        sort('top');\n                    }\n                }}>Top</div>\n                <div className={`sortbar-btn ${sortTypePosts === 'new' ? `sortbar-btn-active` : ''}`} onClick={() => {\n                    if (sortTypePosts !== 'new') {\n                        sort('new');\n                    }\n                }}>New</div>\n                <div className={`sortbar-btn ${sortTypePosts === 'old' ? `sortbar-btn-active` : ''}`} onClick={() => {\n                    if (sortTypePosts !== 'old') {\n                        sort('old');\n                    }\n                }}>Old</div>\n            </div>\n        :\n            <div className=\"sortbar-comments\">\n                <div className=\"sortbar-comments-btn\" onClick={() => { dropdown ? setDropdown(false) : setDropdown(true) }}>\n                    {sortTypeComments === 'best' ? <div>Sort By: Best</div> : null}\n                    {sortTypeComments === 'hot' ? <div>Sort By: Hot</div> : null}\n                    {sortTypeComments === 'top' ? <div>Sort By: Top</div> : null}\n                    {sortTypeComments === 'new' ? <div>Sort By: New</div> : null}\n                    {sortTypeComments === 'old' ? <div>Sort By: Old</div> : null}\n                    {sortTypeComments === 'controversial' ? <div>Sort By: Controversial</div> : null}\n                    {dropdown ?\n                    <div className=\"sortbar-comments-dropdown\">\n                        <div className=\"sortbar-comments-dropdown-item\" onClick={() => {\n                            if (sortTypeComments !== 'best') {\n                                sort('best');\n                            }\n                        }}>Best</div>\n                        <div className=\"sortbar-comments-dropdown-item\" onClick={() => {\n                            if (sortTypeComments !== 'hot') {\n                                sort('hot');\n                            }\n                        }}>Hot</div>\n                        <div className=\"sortbar-comments-dropdown-item\" onClick={() => {\n                            if (sortTypeComments !== 'top') {\n                                sort('top');\n                            }\n                        }}>Top</div>\n                        <div className=\"sortbar-comments-dropdown-item\" onClick={() => {\n                            if (sortTypeComments !== 'new') {\n                                sort('new');\n                            }\n                        }}>New</div>\n                        <div className=\"sortbar-comments-dropdown-item\" onClick={() => {\n                            if (sortTypeComments !== 'old') {\n                                sort('old');\n                            }\n                        }}>Old</div>\n                        <div className=\"sortbar-comments-dropdown-item\" onClick={() => {\n                            if (sortTypeComments !== 'controversial') {\n                                sort('controversial');\n                            }\n                        }}>Controversial</div>\n                    </div>\n                    : null}\n                </div>\n            </div>\n        }\n        </div>\n    );\n}\n\nexport default Sortbar;","const formatNumber = num => {\n    if (Math.abs(num) >= 1000 && Math.abs(num) < 1000000) {\n        num = (num / 1000).toFixed(1) + 'k';\n    }\n    if (Math.abs(num) >= 1000000 && Math.abs(num) < 1000000000) {\n        num = (num / 1000000).toFixed(1) + 'm';\n    }\n    if (Math.abs(num) >= 1000000000) {\n        num = (num / 1000000000).toFixed(1) + 'b';\n    }\n\n    return num;\n};\n\nexport default formatNumber;","// Convert seconds to string showing amount of time passed since then\nconst getElapsedTime = startTime => {\n    let elapsedTime;\n    const secondsPerYear = 365 * 24 * 60 * 60; // 31536000 sec\n    const secondsPerMonth = 30 * 24 * 60 * 60; // 2592000 sec\n    const secondsPerDay = 24 * 60 * 60; // 86400 sec\n    const secondsPerHour = 60 * 60; // 3600 sec\n    const secondsPerMinute = 60; // 60 sec\n\n    // Get time difference between specified and current time (milliseconds)\n    const delta = Date.now() - (startTime * 1000);\n\n    // Convert seconds to years / months / days / hours / minutes\n    const seconds = delta / 1000;\n    const years = Math.floor(seconds / secondsPerYear);\n    const months = Math.floor((seconds - (years * secondsPerYear)) / secondsPerMonth);\n    const days = Math.floor((seconds - (years * secondsPerYear) - (months * secondsPerMonth)) / secondsPerDay);\n    const hours = Math.floor((seconds - (years * secondsPerYear) - (months * secondsPerMonth) - (days * secondsPerDay)) / secondsPerHour);\n    const minutes = Math.floor((seconds - (years * secondsPerYear) - (months * secondsPerMonth)\n        - (days * secondsPerDay) - (hours * secondsPerHour)) / secondsPerMinute);\n\n    // Set elapsed time output\n    if (years === 1) { elapsedTime = years + ' year'; }\n    else if (years > 1) { elapsedTime = years + ' years'; }\n    else if (months === 1) { elapsedTime = months + ' month'; }\n    else if (months > 1) { elapsedTime = months + ' months'; }\n    else if (days === 1) { elapsedTime = days + ' day'; }\n    else if (days > 1) { elapsedTime = days + ' days'; }\n    else if (hours === 1) { elapsedTime = hours + ' hour'; }\n    else if (hours > 1) { elapsedTime = hours + ' hours'; }\n    else if (minutes === 1) { elapsedTime = minutes + ' minute'; }\n    else if (minutes > 1) { elapsedTime = minutes + ' minutes'; }\n    else if (minutes === 0) { return 'Just now'; }\n\n    return elapsedTime + ' ago';\n};\n\nexport default getElapsedTime;","import React, { useState, useEffect } from \"react\";\nimport { useParams, Navigate, Link } from \"react-router-dom\";\nimport { getFirestore, doc, updateDoc, deleteField, deleteDoc } from \"firebase/firestore\";\nimport formatNumber from \"../functions/formatNumber\";\nimport getElapsedTime from \"../functions/getElapsedTime\";\nimport \"../styles/PostBox.css\";\n\nconst PostBox = ({user, setUser, propSlug, post, setPost, posts, setPosts, activeFlairs, pickFlair, postPage, nightMode}) => {\n    let { slug } = useParams(); // Get subreddit slug from url\n    if (propSlug) { slug = propSlug; } // If propSlug passed from Home component, set slug to propSlug\n    const [upvoted, setUpvoted] = useState(false);\n    const [downvoted, setDownvoted] = useState(false);\n    const [deleted, setDeleted] = useState(false);\n\n    // Set Upvoted & Downvoted on componentDidMount & componentDidUpdate\n    useEffect(() => {\n        if (user && user.upvoted.includes(post.id)) {\n            setUpvoted(true);\n        } else  {\n            setUpvoted(false);\n        }\n\n        if (user && user.downvoted.includes(post.id)) {\n            setDownvoted(true);\n        } else  {\n            setDownvoted(false);\n        }\n    }, [user, post.id]);\n\n    const vote = async (direction) => {\n        const db = getFirestore();\n        const postRef = doc(db, \"posts\", post.id);\n        const userRef = doc(db, \"users\", user.id);\n\n        // Clone user's upvoted/downvoted arrays\n        const upvotedClone = user.upvoted.slice();\n        const downvotedClone = user.downvoted.slice();\n\n        // If not already upvoted/downvoted, add post id to user's upvoted/downvoted array\n        if (direction === 'up' && !upvoted) {\n            upvotedClone.push(post.id);\n        } else if (direction === 'down' && !downvoted) {\n            downvotedClone.push(post.id);\n        }\n\n        // If already upvoted/downvoted, remove post id from user's upvoted/downvoted array\n        if (upvoted) {\n            const index = user.upvoted.indexOf(post.id);\n            upvotedClone.splice(index, 1);\n        } else if (downvoted) {\n            const index = user.downvoted.indexOf(post.id);\n            downvotedClone.splice(index, 1);\n        }\n\n        // Set user's upvoted/downvoted array\n        setUser({\n            ...user,\n            upvoted: upvotedClone,\n            downvoted: downvotedClone\n        });\n\n        // Get new upvotes/downvotes count\n        let newUpvotes = post.upvotes;\n        let newDownvotes = post.downvotes;\n        if (direction === 'up') {\n            upvoted ? newUpvotes-- : newUpvotes++;\n            if (downvoted) {\n                newDownvotes--;\n            }\n        } else {\n            downvoted ? newDownvotes-- : newDownvotes++;\n            if (upvoted) {\n                newUpvotes--;\n            }\n        }\n\n        // Update database\n        await updateDoc(postRef, {\n            upvotes: newUpvotes,\n            downvotes: newDownvotes\n        });\n        await updateDoc(userRef, {\n            upvoted: upvotedClone,\n            downvoted: downvotedClone\n        });\n\n        // Update posts state in Subreddit component\n        const temp = posts.slice();\n        // Find post in temp array, then update post upvotes\n        temp.forEach((p) => {\n            if (p.id === post.id) {\n                p.upvotes = newUpvotes;\n                p.downvotes = newDownvotes;\n            }\n        });\n        setPosts(temp);\n\n        // Update post state in Post component\n        if (postPage) {\n            setPost({\n                ...post,\n                upvotes: newUpvotes,\n                downvotes: newDownvotes\n            });\n        }\n    };\n\n    const deletePost = () => {\n\t\tconst db = getFirestore();\n\n\t\t// Delete Fields from Document\n\t\tconst deleteDocFields = async (id) => {\n\t\t\tconst docRef = doc(db, \"posts\", id);\n\t\t\tawait updateDoc(docRef, {\n                author: deleteField(),\n                comments: deleteField(),\n\t\t\t\tdate: deleteField(),\n                downvotes: deleteField(),\n                subreddit: deleteField(),\n                text: deleteField(),\n                title: deleteField(),\n                upvotes: deleteField()\n\t\t\t});\n\t\t};\n\n\t\t// Delete Document\n\t\tconst deleteDocument = async (id) => {\n\t\t\tconst docRef = doc(db, \"posts\", id);\n\t\t\tawait deleteDoc(docRef);\n\t\t};\n\n\t\t// Delete Post\n        deleteDocFields(post.id)\n        .then(() => { deleteDocument(post.id) })\n        .then(() => { setDeleted(true); })\n        .catch((error) => {\n            console.log(error);\n        });\n\t};\n\n    return (\n        <div className={!nightMode ? \"post-box-container\" : \"post-box-container-dark\"}>\n            { deleted ?\n\t\t\t\t<Navigate to={`/`} />\n            :\n            <div className=\"post-box\">\n                <div className=\"post-box-votes-container\">\n                    <div className={`post-box-upvote-btn ${user && upvoted ? `post-box-upvoted` : ''}`} onClick={\n                        user ? () => {\n                            vote('up');\n                        } : null\n                    } />\n                    <div className=\"post-box-votes\">\n                        {formatNumber(post.upvotes - post.downvotes)}\n                    </div>\n                    <div className={`post-box-downvote-btn ${user && downvoted ? `post-box-downvoted` : ''}`} onClick={\n                        user ? () => {\n                            vote('down');\n                        } : null\n                    } />\n                </div>\n                <div className=\"post-box-details\">\n                    <div className=\"post-box-meta\">\n                        {propSlug ?\n                            <Link to={`/r/${propSlug}`} className=\"post-box-subreddit\">r/{propSlug}</Link>\n                        : null}\n                        <span className=\"post-box-author\">Posted by u/{post.author}</span>\n                        <span className=\"post-box-date\">{getElapsedTime(post.date.seconds)}</span>\n                    </div>\n                    <div className=\"post-box-title\">\n                        {activeFlairs ? post.flairs.map((flair, i) => {\n                            return (\n                                <div key={i} className={`post-box-flair ${activeFlairs.includes(flair) ? `post-box-flair-active` : null}`}\n                                    onClick={() => {pickFlair(flair)}}>\n                                    {postPage ?\n                                        <Link to={`/r/${slug}`}>{flair}</Link>\n                                    : flair}\n                                </div>\n                            );\n                        })\n                        : null}\n                        <h3>{post.title}</h3>\n                    </div>\n                    <div className=\"post-box-text\">\n                        {post.text}\n                    </div>\n                    <div className=\"post-box-btns-container\">\n                        <Link to={`/r/${slug}/comments/${post.id}/${post.title}`} className=\"post-box-btn\">\n                            {post.comments} comments\n                        </Link>\n                        {user && post.author === user.username ?\n                            <div className=\"post-box-btn\" onClick={deletePost}>Delete</div>\n                        : null}\n                    </div>\n                </div>\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default PostBox;","import React, { useState, useEffect } from \"react\";\nimport { getFirestore, collection, getDocs } from \"firebase/firestore\";\nimport Sortbar from \"./Sortbar\";\nimport PostBox from \"./PostBox\";\nimport { sortByHot } from \"../functions/sorts\";\nimport \"../styles/Home.css\";\n\nconst Home = ({user, setUser, nightMode}) => {\n\tconst [posts, setPosts] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst getPosts = async () => {\n\t\t\tconst db = getFirestore();\n\t\t\tconst querySnapshot = await getDocs(collection(db, \"posts\"));\n\t\t\tconst postsArray = [];\n\n\t\t\t// Add fetched posts to posts array\n\t\t\tquerySnapshot.forEach(post => {\n\t\t\t\t// Push post data along with post id to array\n\t\t\t\tpostsArray.push({\n\t\t\t\t\t...post.data(),\n\t\t\t\t\tid: post.id\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Sort posts array by hot (desc)\n\t\t\tsortByHot(postsArray);\n\n\t\t\tsetPosts(postsArray.slice());\n\t\t};\n\n\t\tgetPosts();\n\t}, []);\n\n\treturn (\n\t\t<div className={!nightMode ? \"home\" : \"home home-dark\"}>\n\t\t\t<div className=\"home-header\">\n\t\t\t\tPopular posts\n\t\t\t</div>\n\t\t\t<div className=\"home-body\">\n\t\t\t\t<div className=\"home-posts-container\">\n\t\t\t\t\t<Sortbar posts={posts} setPosts={setPosts} nightMode={nightMode} />\n\t\t\t\t\t{posts.length !== 0 ?\n\t\t\t\t\t\tposts.map((post) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<PostBox key={post.id} user={user} propSlug={post.subreddit} setUser={setUser}\n\t\t\t\t\t\t\t\t\tpost={post} posts={posts} setPosts={setPosts} nightMode={nightMode} />\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"home-sidebar\">\n\t\t\t\t\t<div className=\"home-sidebar-section\">\n\t\t\t\t\t\t<div className=\"home-sidebar-section-header\">About</div>\n\t\t\t\t\t\t<div className=\"home-sidebar-section-content\">\n\t\t\t\t\t\t\tFakeddit is a project made to simulate a popular website. Created through&nbsp;\n\t\t\t\t\t\t\t<a href=\"https://www.theodinproject.com\">TheOdinProject</a> online course.\n\t\t\t\t\t\t\t<br /><br />\n\t\t\t\t\t\t\tView source code <a href=\"https://github.com/RedRaptor10/fakeddit\">here</a>.\n\t\t\t\t\t\t\t<div className=\"home-sidebar-section-content-created\">\n                        \t\tCreated Dec 17, 2021\n                    \t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"home-sidebar-section\">\n\t\t\t\t\t\t<div className=\"home-sidebar-section-header\">Features</div>\n\t\t\t\t\t\t<div className=\"home-sidebar-section-content\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>Create / delete account</li>\n\t\t\t\t\t\t\t\t<li>Log in / log out account</li>\n\t\t\t\t\t\t\t\t<li>Toggle night mode</li>\n\t\t\t\t\t\t\t\t<li>Browse different subfakeddits</li>\n\t\t\t\t\t\t\t\t<li>Create / delete posts & comments</li>\n\t\t\t\t\t\t\t\t<li>Upvote / downvote posts & comments</li>\n\t\t\t\t\t\t\t\t<li>Collapse comments</li>\n\t\t\t\t\t\t\t\t<li>Sort posts / comments</li>\n\t\t\t\t\t\t\t\t<li>Filter posts by flairs</li>\n\t\t\t\t\t\t\t\t<li>Search posts</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"home-sidebar-section\">\n\t\t\t\t\t\t<div className=\"home-sidebar-section-header\">Technologies</div>\n\t\t\t\t\t\t<div className=\"home-sidebar-section-content\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>React</li>\n\t\t\t\t\t\t\t\t<li>Firebase</li>\n\t\t\t\t\t\t\t\t<li>JavaScript</li>\n\t\t\t\t\t\t\t\t<li>HTML</li>\n\t\t\t\t\t\t\t\t<li>CSS</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Home;","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { getFirestore, collection, query, where, getDocs } from \"firebase/firestore\";\nimport getElapsedTime from \"../functions/getElapsedTime\";\nimport formatNumber from \"../functions/formatNumber\";\nimport \"../styles/Search.css\";\n\nconst Search = ({nightMode}) => {\n    const { searchQuery } = useParams(); // Get search query from url\n    const [posts, setPosts] = useState([]);\n\n    // Get posts where title contains search query on componentDidMount & componentDidUpdate\n    useEffect(() => {\n        const getPosts = async () => {\n            const db = getFirestore();\n            /* To search with prefixes, add '\\uf8ff', which is a high code point in Unicode that comes after every character.\n                This allows the query to match all values that start with searchQuery. */\n            const q = query(collection(db, \"posts\"), where(\"title\", \">=\", searchQuery), where (\"title\", \"<=\", searchQuery + \"\\uf8ff\"));\n            const querySnapshot = await getDocs(q);\n            const temp = [];\n\n            querySnapshot.forEach((doc) => {\n                // Push post data along with post id to array\n                temp.push({\n                    ...doc.data(),\n                    id: doc.id\n                });\n            });\n\n            setPosts(temp);\n        };\n\n        getPosts();\n    }, [searchQuery]);\n\n    return (\n        <div className={!nightMode ? \"search\" : \"search search-dark\"}>\n            <div className=\"search-results\">\n                {posts.map((post, i) => {\n                    return (\n                        <div key={i} className=\"search-result\">\n                            <div className=\"search-result-meta\">\n                                <span className=\"search-result-subreddit\"><Link to={`/r/${post.subreddit}`}>r/{post.subreddit}</Link></span>\n                                <span className=\"search-result-author\">Posts by u/{post.author}</span>\n                                <span className=\"search-result-date\">{getElapsedTime(post.date.seconds)}</span>\n                            </div>\n                            <div className=\"search-result-title\">\n                                <Link to={`/r/${post.subreddit}/comments/${post.id}/${post.title}`}>{post.title}</Link>\n                            </div>\n                            <div className=\"search-result-details\">\n                                <span className=\"search-result-upvotes\">{formatNumber(post.upvotes)} upvotes</span>\n                                <span className=\"search-result-comments\">{formatNumber(post.comments)} comments</span>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Search;","import React from \"react\";\nimport \"../styles/Footer.css\";\n\nconst Footer = ({nightMode}) => {\n\treturn (\n\t\t<div className={!nightMode ? \"footer\" : \"footer footer-dark\"}>\n            <div className=\"footer-content\">\n\t\t\t    <ul>\n                    <li>About</li>\n                    <li>Careers</li>\n                    <li>Press</li>\n                </ul>\n                <ul>\n                    <li>Advertise</li>\n                    <li>Blog</li>\n                    <li>Help</li>\n                </ul>\n                <ul>\n                    <li>Fakeddit Coins</li>\n                    <li>Fakeddit Premium</li>\n                    <li>Fakeddit Gifts</li>\n                </ul>\n                <ul>\n                    <li>Facebook</li>\n                    <li>Twitter</li>\n                    <li>Instagram</li>\n                </ul>\n            </div>\n            <div className=\"footer-bottom\">\n                <ul>\n                    <li>Content Policy</li>\n                    <li>Privacy Policy</li>\n                    <li>User Agreement</li>\n                    <li>Mod Policy</li>\n                    <li>Fakeddit created through <a href=\"https://www.theodinproject.com/\">TheOdinProject</a> online course.</li>\n                </ul>\n            </div>\n\t\t</div>\n\t);\n}\n\nexport default Footer;","// Convert seconds to string showing date\nconst secondsToDate = seconds => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const date = new Date(seconds * 1000);\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    return months[month] + ' ' + day + ', ' + year;\n};\n\nexport default secondsToDate;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport secondsToDate from \"../functions/secondsToDate\";\nimport formatNumber from \"../functions/formatNumber\";\nimport \"../styles/SubSidebar.css\";\n\nconst SubSidebar = ({ user, slug, subreddit, colors, activeFlairs, pickFlair, postPage, nightMode }) => {\n    const { description, members, color, flairs, created } = subreddit;\n\n    return (\n        <div className={!nightMode ? \"subreddit-sidebar\" : \"subreddit-sidebar subreddit-sidebar-dark\"}>\n            <div className=\"subreddit-sidebar-section\">\n                <div className=\"subreddit-sidebar-section-header\" style={\n                    color ? {\n                        background: colors[color],\n                        color: 'rgb(255, 255, 255)' \n                    } : null\n                }>\n                    About Community\n                </div>\n                <div className=\"subreddit-sidebar-section-content\">\n                    <div className=\"subreddit-sidebar-section-content-description\">\n                        {description}\n                    </div>\n                    <div className=\"subreddit-sidebar-section-content-members\">\n                        <div className=\"subreddit-sidebar-section-content-members-section\">\n                            <span className=\"subreddit-sidebar-section-content-members-number\">{formatNumber(members)}</span><br />Members\n                        </div>\n                        <div className=\"subreddit-sidebar-section-content-members-section\">\n                            <span className=\"subreddit-sidebar-section-content-members-number\">0</span><br />Online\n                        </div>\n                    </div>\n                    <div className=\"subreddit-sidebar-section-content-created\">\n                        Created {secondsToDate(created.seconds)}\n                    </div>\n                    {user ?\n                        <div className=\"subreddit-sidebar-section-create\">\n                            <Link to=\"submit\" state={{flairs: flairs}}>\n                                <div className=\"subreddit-sidebar-section-create-btn\" style={\n                                    color ? {\n                                        background: colors[color],\n                                        color: 'rgb(255, 255, 255)'\n                                    } : null\n                                }>\n                                    Create Post\n                                </div>\n                            </Link>\n                        </div>\n                    : null}\n                </div>\n            </div>\n            <div className=\"subreddit-sidebar-section\">\n                <div className=\"subreddit-sidebar-section-header\" style={\n                    color ? {\n                        background: colors[color],\n                        color: 'rgb(255, 255, 255)' \n                    } : null\n                }>\n                    Filter by Flair\n                </div>\n                <div className=\"subreddit-sidebar-section-flairs\">\n                    {flairs.map((flair, i) => {\n                        return (\n                            <div key={i} className={`subreddit-sidebar-section-flair\n                                ${activeFlairs.includes(flair) ? `subreddit-sidebar-section-flair-active` : null}`}\n                                onClick={() => {pickFlair(flair)}}>\n                                {postPage ?\n                                    <Link to={`/r/${slug}`}>{flair}</Link>\n                                : flair}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SubSidebar;","import React from \"react\";\n\nexport const SubredditContext = React.createContext({});","import React, { useState, useEffect } from \"react\";\nimport { useParams, Outlet } from \"react-router-dom\";\nimport { getFirestore, collection, query, where, doc, getDoc, getDocs } from \"firebase/firestore\";\nimport Sortbar from \"./Sortbar\";\nimport PostBox from \"./PostBox\";\nimport SubSidebar from \"./SubSidebar\";\nimport { SubredditContext } from \"./subredditContext\"; // Import Context allows passing of props to child Post component\nimport \"../styles/Subreddit.css\";\n\nconst Subreddit = ({user, setUser, nightMode}) => {\n\tconst { slug } = useParams(); // Get subreddit slug from url\n\tconst [subreddit, setSubreddit] = useState({\n\t\tslug: '',\n\t\ttitle: '',\n\t\tbanner: '',\n\t\ticon: '',\n\t\tmembers: 0,\n\t\tcolor: '',\n\t\tflairs: [],\n\t\tdescription: '',\n\t\tcreated: 0\n\t});\n\tconst [posts, setPosts] = useState([]);\n\tconst [activeFlairs, setActiveFlairs] = useState([]);\n\tconst { title, banner, icon, color } = subreddit;\n\tconst colors = {\n\t\tLightBlue: 'rgb(0, 121, 211)',\n\t\tDarkBlue: 'rgb(0, 64, 121)'\n\t}\n\n\t// Get Subreddit & posts from database on componentDidMount & componentDidUpdate\n\tuseEffect(() => {\n\t\tconst getSubreddit = async () => {\n\t\t\tconst db = getFirestore();\n\t\t\tconst docRef = doc(db, \"subreddits\", slug);\n\t\t\tconst docSnap = await getDoc(docRef);\n\n\t\t\tif (docSnap.exists()) {\n\t\t\t\treturn docSnap.data();\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\tconst getPosts = async () => {\n\t\t\t\tconst db = getFirestore();\n\t\t\t\tconst postsRef = collection(db, \"posts\");\n\t\t\t\tconst q = query(postsRef, where(\"subreddit\", \"==\", slug));\n\t\t\t\tconst querySnap = await getDocs(q);\n\t\t\t\tconst postsArray = [];\n\n\t\t\t\t// Add fetched posts to posts array\n\t\t\t\tquerySnap.forEach(post => {\n\t\t\t\t\t// Push post data along with post id to array\n\t\t\t\t\tpostsArray.push({\n\t\t\t\t\t\t...post.data(),\n\t\t\t\t\t\tid: post.id\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Sort posts array by date (desc)\n\t\t\t\tpostsArray.sort((a, b) => {\n\t\t\t\t\treturn b.date - a.date;\n\t\t\t\t});\n\n\t\t\t\tsetPosts(postsArray.slice());\n\t\t};\n\n\t\t// Get Subreddit data from Promise\n\t\tgetSubreddit()\n\t\t.then((data) => {\n\t\t\tsetSubreddit(data);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\n\t\tgetPosts();\n\t}, [slug]);\n\n\t// Add/remove flair to active flairs\n\tconst pickFlair = (flair) => {\n\t\tconst temp = activeFlairs.slice();\n\n\t\t// If flair already picked, remove flair, otherwise add flair\n\t\tif (activeFlairs.includes(flair)) {\n\t\t\tconst index = activeFlairs.indexOf(flair);\n\t\t\ttemp.splice(index, 1);\n\t\t} else {\n\t\t\ttemp.push(flair);\n\t\t}\n\n\t\tsetActiveFlairs(temp);\n    };\n\n\t// Check if post has an active flair\n\tconst hasActiveFlair = (postFlairs) => {\n\t\tlet includes = false;\n\t\tpostFlairs.forEach((f) => {\n\t\t\tif (activeFlairs.includes(f)) {\n\t\t\t\tincludes = true;\n\t\t\t}\n\t\t});\n\n\t\treturn includes;\n\t};\n\n\treturn (\n\t\t<div className={!nightMode ? \"subreddit\" : \"subreddit-dark\"}>\n\t\t\t<div className=\"subreddit-banner\" style={\n\t\t\t\t{\n\t\t\t\t\tbackgroundImage: 'url(' + banner + ')',\n\t\t\t\t\tbackgroundColor: colors[color]\n\t\t\t\t}\n\t\t\t} />\n\t\t\t<div className=\"subreddit-header\">\n\t\t\t\t<div className=\"subreddit-header-content\">\n\t\t\t\t\t<img className=\"subreddit-icon\" url={icon} alt=\"\" />\n\t\t\t\t\t<div className=\"subreddit-title\">\n\t\t\t\t\t\t<h1>{title}</h1>\n\t\t\t\t\t\t<div className=\"subreddit-name\">r/{slug}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"subreddit-body\">\n\t\t\t\t<div className=\"subreddit-posts-container\">\n\t\t\t\t\t<Sortbar posts={posts} setPosts={setPosts} nightMode={nightMode} />\n\t\t\t\t\t{posts.length !== 0 ?\n\t\t\t\t\t\tposts.map((post) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t/* Render post if there are no active flairs OR post has an active flair */\n\t\t\t\t\t\t\t\tactiveFlairs.length === 0 || hasActiveFlair(post.flairs) ?\n\t\t\t\t\t\t\t\t\t<PostBox key={post.id} user={user} setUser={setUser} post={post} posts={posts} setPosts={setPosts}\n\t\t\t\t\t\t\t\t\t\tactiveFlairs={activeFlairs} pickFlair={pickFlair} nightMode={nightMode} />\n\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<SubSidebar user={user} slug={slug} subreddit={subreddit} colors={colors}\n\t\t\t\t\tactiveFlairs={activeFlairs} pickFlair={pickFlair} nightMode={nightMode} />\n\t\t\t</div>\n\t\t\t<SubredditContext.Provider value={{subreddit, colors, posts, setPosts, activeFlairs, pickFlair}}>\n\t\t\t\t<Outlet /> {/* Nested route for Post component */}\n\t\t\t</SubredditContext.Provider>\n\t\t</div>\n\t);\n}\n\nexport default Subreddit;","import React, { useState } from \"react\";\nimport { useParams, useLocation, useNavigate, Link } from \"react-router-dom\";\nimport { getFirestore, collection, addDoc } from \"firebase/firestore\";\nimport \"../styles/Submit.css\";\n\nconst Submit = ({user, nightMode}) => {\n\tconst { slug } = useParams(); // Get subreddit slug from url\n\tconst [title, setTitle] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { flairs } = useLocation().state;\n\tconst [activeFlairs, setActiveFlairs] = useState([]);\n\tconst [error, setError] = useState('');\n\tconst navigate = useNavigate();\n\n\t// Dynamically change state from title input\n\tconst handleTitle = event => {\n\t\tsetTitle(event.target.value);\n\t};\n\n\t// Dynamically change state from title input\n\tconst handleText = event => {\n\t\tsetText(event.target.value);\n\t};\n\n\tconst pickFlair = event => {\n\t\tconst flair = event.target.innerHTML;\n\t\tconst temp = activeFlairs.slice();\n\n\t\t// If flair already picked, remove flair, otherwise add flair\n\t\tif (activeFlairs.includes(flair)) {\n\t\t\tconst index = activeFlairs.indexOf(flair);\n\t\t\ttemp.splice(index, 1);\n\t\t} else {\n\t\t\ttemp.push(flair);\n\t\t}\n\n\t\tsetActiveFlairs(temp);\n\t};\n\n\tconst submitPost = async () => {\n\t\tif (title !== '' && text !== '') {\n\t\t\tconst db = getFirestore();\n\t\t\tawait addDoc(collection(db, \"posts\"), {\n\t\t\t\tauthor: user.username,\n\t\t\t\tcomments: 0,\n\t\t\t\tdate: new Date(),\n\t\t\t\tdownvotes: 0,\n\t\t\t\tflairs: activeFlairs,\n\t\t\t\tsubreddit: slug,\n\t\t\t\ttext: text,\n\t\t\t\ttitle: title,\n\t\t\t\tupvotes: 1\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tnavigate(\"/r/\" + slug);\n\t\t\t});\n\t\t} else {\n\t\t\tsetError('All fields required.');\n\t\t}\n\t};\n\n\treturn (\n\t\tuser ?\n\t\t\t<div className={!nightMode ? \"submit\" : \"submit submit-dark\"}>\n\t\t\t\t<h3>Create a post</h3>\n\t\t\t\t<div className=\"submit-subreddit\">\n\t\t\t\t\tSubfakeddit: <Link to={`/r/${slug}`}>r/{slug}</Link>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"submit-title\">\n\t\t\t\t\t<div className=\"submit-label\">Title</div>\n\t\t\t\t\t<input type=\"text\" placeholder=\"My first post\" onChange={handleTitle} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"submit-text\">\n\t\t\t\t\t<div className=\"submit-label\">Text</div>\n\t\t\t\t\t<textarea onChange={handleText} />\n\t\t\t\t</div>\n\t\t\t\t{error !== '' ?\n\t\t\t\t\t<div className=\"error-msg\">{error}</div>\n\t\t\t\t: null}\n\t\t\t\t<div className=\"submit-flairs-container\">\n\t\t\t\t\t<div className=\"submit-label\">Flairs</div>\n\t\t\t\t\t<div className=\"submit-flairs\">\n\t\t\t\t\t\t{flairs.map((flair, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={i} className={`submit-flair ${activeFlairs.includes(flair) ? `submit-flair-active` : null}`}\n\t\t\t\t\t\t\t\tonClick={pickFlair}>{flair}</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"submit-btn\" onClick={submitPost}>Post</button>\n\t\t\t</div>\n\t\t: null\n\t);\n}\n\nexport default Submit;","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getFirestore, addDoc, collection, doc, updateDoc } from \"firebase/firestore\";\nimport LogIn from \"./LogIn\";\nimport \"../styles/Reply.css\";\n\nconst Reply = ({user, post, setPost, parent, nightMode}) => {\n    const { slug } = useParams(); // Get subreddit slug from url\n    const [reply, setReply] = useState('');\n    const [error, setError] = useState('');\n    const [logInForm, setLogInForm] = useState(false);\n\tconst [signUpForm, setSignUpForm] = useState(false);\n\n    // Dynamically change state from reply input\n\tconst handleReply = event => {\n\t\tsetReply(event.target.value);\n    };\n\n    const submitReply = async () => {\n        if (reply !== '') {\n\t\t\tconst db = getFirestore();\n\t\t\tawait addDoc(collection(db, \"comments\"), {\n\t\t\t\tauthor: user.username,\n\t\t\t\tdate: new Date(),\n                downvotes: 0,\n                parentId: parent,\n                postId: post.id,\n                replies: [],\n                subreddit: slug,\n\t\t\t\ttext: reply,\n\t\t\t\tupvotes: 1\n\t\t\t})\n\t\t\t.then(() => {\n                // Clear reply input\n                const replyInputs = document.querySelectorAll('.reply-input');\n                replyInputs.forEach((replyInput) => {\n                    replyInput.value = '';\n                });\n                setReply('');\n                setError('');\n            })\n            .then(() => {\n                // Increment comment count in database\n                const postRef = doc(db, \"posts\", post.id);\n                (async () => {\n                    await updateDoc(postRef, {\n                        comments: post.comments + 1\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    });\n                })();\n\n                // Increment comment count in post object\n                setPost(\n                    {\n                        ...post,\n                        comments: post.comments + 1\n                    }\n                );\n            });\n\t\t} else {\n\t\t\tsetError('All fields required.');\n\t\t}\n    };\n\n    return (\n        <div className={!nightMode ? \"reply\" : \"reply reply-dark\"}>\n            {user ?\n                <div className={`reply-form ${parent === '' ? `reply-form-post` : ''}`}>\n                    <textarea className=\"reply-input\" placeholder=\"Comment on this post\" onChange={handleReply} />\n                    {error !== '' ?\n                        <div className=\"error-msg\">{error}</div>\n                    : null}\n                    <button className=\"reply-submit-btn\" onClick={submitReply}>Reply</button>\n                </div>\n            :\n            <div>\n                <span>Log in or Sign up to leave a comment</span>\n                <button className=\"login-btn\" onClick={() => {setLogInForm(true)}}>Log In</button>\n\t\t\t\t<button className=\"signup-btn\" onClick={() => {setSignUpForm(true)}}>Sign Up</button>\n            </div>}\n            {logInForm ?\n\t\t\t\t<LogIn setLogInForm={setLogInForm} setSignUpForm={setSignUpForm} logIn={true} nightMode={nightMode} />\n\t\t\t: null}\n\t\t\t{signUpForm ?\n\t\t\t\t<LogIn setLogInForm={setLogInForm} setSignUpForm={setSignUpForm} logIn={false} nightMode={nightMode} />\n\t\t\t: null}\n        </div>\n    );\n}\n\nexport default Reply;","import React, { useState, useEffect } from \"react\";\nimport { getFirestore, doc, updateDoc, deleteField, deleteDoc } from \"firebase/firestore\";\nimport Reply from \"./Reply\";\nimport formatNumber from \"../functions/formatNumber\";\nimport getElapsedTime from \"../functions/getElapsedTime\";\n\nconst Comment = ({user, setUser, comment, comments, setComments, post, setPost, nightMode}) => {\n    const [collapsed, setCollapsed] = useState(false);\n    const [showCommentsReply, setShowCommentsReply] = useState(false);\n    const [upvoted, setUpvoted] = useState(false);\n    const [downvoted, setDownvoted] = useState(false);\n\n    // Set Upvoted & Downvoted on componentDidMount & componentDidUpdate\n    useEffect(() => {\n        if (user && user.upvoted.includes(comment.id)) {\n            setUpvoted(true);\n        } else  {\n            setUpvoted(false);\n        }\n\n        if (user && user.downvoted.includes(comment.id)) {\n            setDownvoted(true);\n        } else  {\n            setDownvoted(false);\n        }\n    }, [user, comment.id]);\n\n    const vote = async (direction) => {\n        const db = getFirestore();\n        const commentRef = doc(db, \"comments\", comment.id);\n        const userRef = doc(db, \"users\", user.id);\n\n        // Clone user's upvoted/downvoted arrays\n        const upvotedClone = user.upvoted.slice();\n        const downvotedClone = user.downvoted.slice();\n\n        // If not already upvoted/downvoted, add comment id to user's upvoted/downvoted array\n        if (direction === 'up' && !upvoted) {\n            upvotedClone.push(comment.id);\n        } else if (direction === 'down' && !downvoted) {\n            downvotedClone.push(comment.id);\n        }\n\n        // If already upvoted/downvoted, remove comment id from user's upvoted/downvoted array\n        if (upvoted) {\n            const index = user.upvoted.indexOf(comment.id);\n            upvotedClone.splice(index, 1);\n        } else if (downvoted) {\n            const index = user.downvoted.indexOf(comment.id);\n            downvotedClone.splice(index, 1);\n        }\n\n        // Set user's upvoted/downvoted array\n        setUser({\n            ...user,\n            upvoted: upvotedClone,\n            downvoted: downvotedClone\n        });\n\n        // Get new upvotes/downvotes count\n        let newUpvotes = comment.upvotes;\n        let newDownvotes = comment.downvotes;\n        if (direction === 'up') {\n            upvoted ? newUpvotes-- : newUpvotes++;\n            if (downvoted) {\n                newDownvotes--;\n            }\n        } else {\n            downvoted ? newDownvotes-- : newDownvotes++;\n            if (upvoted) {\n                newUpvotes--;\n            }\n        }\n\n        // Update database\n        await updateDoc(commentRef, {\n            upvotes: newUpvotes,\n            downvotes: newDownvotes\n        });\n        await updateDoc(userRef, {\n            upvoted: upvotedClone,\n            downvoted: downvotedClone\n        });\n\n        // Update comments state in Comments component\n        const temp = comments.slice();\n        // Find comment in temp array, then update comment upvotes\n        temp.forEach((c) => {\n            if (c.id === comment.id) {\n                c.upvotes = newUpvotes;\n                c.downvotes = newDownvotes;\n            }\n        });\n\n        setComments(temp);\n    };\n\n    const deleteComment = () => {\n\t\tconst db = getFirestore();\n\n\t\t// Delete Fields from Document\n\t\tconst deleteDocFields = async (id) => {\n\t\t\tconst docRef = doc(db, \"comments\", id);\n\t\t\tawait updateDoc(docRef, {\n\t\t\t\tauthor: deleteField(),\n\t\t\t\tdate: deleteField(),\n                downvotes: deleteField(),\n                parentId: deleteField(),\n                postId: deleteField(),\n                replies: deleteField(),\n                subreddit: deleteField(),\n                text: deleteField(),\n                upvotes: deleteField()\n\t\t\t});\n\t\t};\n\n\t\t// Delete Document\n\t\tconst deleteDocument = async (id) => {\n\t\t\tconst docRef = doc(db, \"comments\", id);\n\t\t\tawait deleteDoc(docRef);\n\t\t};\n\n\t\t// Delete Comment\n        deleteDocFields(comment.id)\n        .then(() => { deleteDocument(comment.id) })\n        .then(() => {\n            // Decrement comment count in database\n            const postRef = doc(db, \"posts\", post.id);\n            (async () => {\n                await updateDoc(postRef, {\n                    comments: post.comments - 1\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            })();\n\n            // Decrement comment count in post object\n            setPost(\n                {\n                    ...post,\n                    comments: post.comments - 1\n                }\n            );\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n\t};\n\n    return (\n        <div className={!nightMode ? \"comment-container\" : \"comment-container : comment-container-dark\"} id={comment.id}>\n            <div className={`comment-sidebar ${collapsed ? `comment-collapsed` : ''}`}>\n                {collapsed ?\n                    <div className=\"comment-expand\" onClick={() => { setCollapsed(false) }} />\n                : null}\n                <div className=\"comment-avatar\" />\n                {!collapsed ?\n                    <div className=\"comment-threadline\" onClick={() => { setCollapsed(true) }} />\n                : null}\n            </div>\n            <div className=\"comment\">\n                <div className=\"comment-details\">\n                    <div className=\"comment-parent\">\n                        <div className=\"comment-meta\">\n                            <span className={`comment-author\n                                ${comment.author === post.author ? `comment-author-poster` : ''}\n                                ${user && comment.author === user.username ? `comment-author-user` : ''}`}>\n                                    {comment.author}\n                            </span>\n                            <span className=\"comment-date\">{getElapsedTime(comment.date.seconds)}</span>\n                        </div>\n                        {!collapsed ?\n                            <div className=\"comment-text\">{comment.text}</div>\n                        : null}\n                    </div>\n                    {!collapsed ?\n                        <div className=\"comment-btns-container\">\n                            <div className=\"comment-votes-container\">\n                                <div className={`comment-upvote-btn ${user && upvoted ? `comment-upvoted` : ''}`} onClick={\n                                    user ? () => {\n                                        vote('up');\n                                    } : null\n                                } />\n                                <div className=\"comment-votes\">\n                                    {formatNumber(comment.upvotes - comment.downvotes)}\n                                </div>\n                                <div className={`comment-downvote-btn ${user && downvoted ? `comment-downvoted` : ''}`} onClick={\n                                    user ? () => {\n                                        vote('down');\n                                    } : null\n                                } />\n                            </div>\n                            {user ?\n                                <div className=\"comment-btn\" onClick={() => {\n                                    !showCommentsReply ? setShowCommentsReply(true) : setShowCommentsReply(false)\n                                }}>Reply</div>\n                            :null}\n                            {user && comment.author === user.username ?\n                                <div className=\"comment-btn\" onClick={deleteComment}>Delete</div>\n                            : null}\n                        </div>\n                    : null}\n                </div>\n                {!collapsed && showCommentsReply ?\n                    <Reply user={user} post={post} setPost={setPost} parent={comment.id} nightMode={nightMode} />\n                : null}\n                {!collapsed && comment.replies.length > 0 ?\n                    <div className=\"replies\">\n                        {comment.replies.map((reply) => {\n                            return (\n                                <Comment user={user} comment={reply} post={post} setPost={setPost} key={reply.id} nightMode={nightMode} />\n                            );\n                        })}\n                    </div>\n                : null}\n            </div>\n        </div>\n    );\n}\n\nexport default Comment;","import React, { useState, useEffect } from \"react\";\nimport { getFirestore, collection, query, where, getDocs } from \"firebase/firestore\";\nimport Sortbar from \"./Sortbar\";\nimport Comment from \"./Comment\";\nimport \"../styles/Comments.css\";\n\nconst Comments = ({user, setUser, post, setPost, nightMode}) => {\n    const [comments, setComments] = useState([]);\n\n\t// Get comments from database on componentDidMount & componentDidUpdate\n\tuseEffect(() => {\n        let allComments = [];\n\n\t\tconst getComments = async () => {\n\t\t\t\tconst db = getFirestore();\n\t\t\t\tconst commentsRef = collection(db, \"comments\");\n\t\t\t\tconst q = query(commentsRef, where(\"postId\", \"==\", post.id));\n\t\t\t\tconst querySnap = await getDocs(q);\n\t\t\t\tconst commentsArray = [];\n\n\t\t\t\t// Add fetched comments to comments array\n\t\t\t\tquerySnap.forEach(comment => {\n\t\t\t\t\t// Push comment data along with comment id to array\n                    commentsArray.push({\n                        ...comment.data(),\n                        id: comment.id\n                    });\n\t\t\t\t});\n\n\t\t\t\t// Sort comments array by votes (desc)\n\t\t\t\tcommentsArray.sort((a, b) => {\n\t\t\t\t\treturn (b.upvotes - b.downvotes) - (a.upvotes - a.downvotes);\n\t\t\t\t});\n\n                allComments = commentsArray.slice();\n        };\n\n        const nestComments = () => {\n            const temp = [];\n\n            // Get parent comments\n            allComments.forEach((comment) => {\n                if (comment.parentId === '') {\n                    temp.push(comment);\n                }\n            });\n\n            // Recursively loop through each comment and add all child comments/replies\n            const addReplies = (branch) => {\n                branch.forEach((comment) => {\n                    // Go through all comments and check if it's a reply to current comment\n                    allComments.forEach((allComment) => {\n                        if (allComment.parentId === comment.id) {\n                            // Add reply to replies array\n                            comment.replies.push(allComment);\n                        }\n                    });\n\n                    // If current comment has replies, recursively loop through each reply\n                    if (comment.replies.length > 0) {\n                        addReplies(comment.replies);\n                    }\n                });\n            };\n\n            addReplies(temp);\n            setComments(temp);\n        };\n\n        getComments()\n        .then(nestComments)\n        .catch((error) => {\n            console.log(error);\n        });\n    }, [post]);\n\n    return (\n        <div className=\"comments\">\n            <Sortbar comments={comments} setComments={setComments} nightMode={nightMode} />\n            {comments.map((comment) => {\n                return (\n                    <Comment key={comment.id} user={user} setUser={setUser} comment={comment} comments={comments}\n                        setComments={setComments} post={post} setPost={setPost} nightMode={nightMode} />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Comments;","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { getFirestore, doc, getDoc } from \"firebase/firestore\";\nimport PostBox from \"./PostBox\";\nimport Reply from \"./Reply\";\nimport Comments from \"./Comments\";\nimport SubSidebar from \"./SubSidebar\";\nimport { SubredditContext } from \"./subredditContext\";\nimport formatNumber from \"../functions/formatNumber\";\nimport \"../styles/Post.css\";\n\nconst Post = ({user, setUser, nightMode}) => {\n    const { slug, postId } = useParams(); // Get post id from url\n    const [post, setPost] = useState({\n        id: '',\n        author: '',\n        comments: 0,\n        date: '',\n        downvotes: 0,\n        flairs: [],\n        postSubreddit: slug,\n        text: '',\n        title: '',\n        upvotes: 0\n    });\n    const { downvotes, title, upvotes } = post;\n    const { subreddit, colors, posts, setPosts, activeFlairs, pickFlair } = React.useContext(SubredditContext); // Get props from parent Subreddit component\n\n    // Get Post from database on componentDidMount & componentDidUpdate\n    useEffect(() => {\n        const getPost = async () => {\n\t\t\tconst db = getFirestore();\n\t\t\tconst docRef = doc(db, \"posts\", postId);\n\t\t\tconst docSnap = await getDoc(docRef);\n\n\t\t\tif (docSnap.exists()) {\n                // Return post data along with post id\n\t\t\t\treturn {\n                    ...docSnap.data(),\n                    id: docSnap.id\n                };\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n        };\n\n        // Get Post data from Promise\n        getPost()\n        .then((p) => {\n            setPost(p);\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n\n        // Disable scroll on parent Subreddit\n        document.body.classList.add(\"no-scroll\");\n        // Re-enable scroll on componentDidUnmount\n        return () => {\n            document.body.classList.remove(\"no-scroll\");\n        };\n    }, [slug, postId]);\n\n    return (\n        <div className={!nightMode ? \"post\" : \"post post-dark\"}>\n            <Link to={`/r/${slug}`}>\n                <div className=\"canvas post-canvas\" />\n            </Link>\n            <div className=\"post-main\">\n                <div className=\"post-header\">\n                    <div className=\"post-header-inner\">\n                        <div className=\"post-votes-container\">\n                            <div className=\"post-upvote-btn\" />\n                            {formatNumber(upvotes)}\n                            <div className=\"post-downvote-btn\" />\n                            {formatNumber(downvotes)}\n                        </div>\n                        <div className=\"post-title\">\n                            {title}\n                        </div>\n                        <Link to={`/r/${slug}`} className=\"post-close-btn-container\">\n                            <div className=\"post-close-btn\">\n                                Close\n                            </div>\n                        </Link>\n                    </div>\n                </div>\n                <div className=\"post-body\">\n                    <div className=\"post-content-container\">\n                        <PostBox user={user} setUser={setUser} post={post} setPost={setPost} posts={posts} setPosts={setPosts}\n                            activeFlairs={activeFlairs} pickFlair={pickFlair} postPage={true} nightMode={nightMode} />\n                        <Reply user={user} post={post} setPost={setPost} parent='' nightMode={nightMode} />\n                        <Comments user={user} setUser={setUser} post={post} setPost={setPost} nightMode={nightMode} />\n                    </div>\n                    <SubSidebar user={user} slug={slug} subreddit={subreddit} colors={colors}\n                        activeFlairs={activeFlairs} pickFlair={pickFlair} postPage={true} nightMode={nightMode} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React, { useState, useEffect } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirebaseConfig } from \"../firebase-config.js\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore, collection, query, where, getDocs } from \"firebase/firestore\";\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport Search from \"./Search\";\nimport Footer from \"./Footer\";\nimport Subreddit from \"./Subreddit\";\nimport Submit from \"./Submit\";\nimport Post from \"./Post\";\nimport \"../styles/index.css\";\n\nconst App = () => {\n\tconst firebaseAppConfig = getFirebaseConfig();\n\tinitializeApp(firebaseAppConfig);\n\n\tconst [user, setUser] = useState();\n\tconst [nightMode, setNightMode] = useState(false);\n\n\t// Set Logged In observer on componentDidMount\n\tuseEffect(() => {\n\t\tconst auth = getAuth();\n\t\tauth.onAuthStateChanged((userAuth) => {\n\t\t\tif (userAuth) {\n\t\t\t\tconst db = getFirestore();\n\n\t\t\t\t// Get user data\n\t\t\t\tconst getUser = async () => {\n\t\t\t\t\tconst q = query(collection(db, \"users\"), where(\"email\", \"==\", auth.currentUser.email));\n\t\t\t\t\tconst querySnapshot = await getDocs(q);\n\t\t\t\t\tquerySnapshot.forEach((doc) => {\n\t\t\t\t\t\tsetUser({\n\t\t\t\t\t\t\tid: doc.id, // Add document id to user object\n\t\t\t\t\t\t\temail: doc.data().email,\n\t\t\t\t\t\t\tusername: doc.data().username,\n\t\t\t\t\t\t\tpassword: doc.data().password,\n\t\t\t\t\t\t\tupvoted: doc.data().upvoted,\n\t\t\t\t\t\t\tdownvoted: doc.data().downvoted\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tgetUser();\n\t\t\t} else {\n\t\t\t\tsetUser(null);\n\t\t\t}\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Header user={user} nightMode={nightMode} setNightMode={setNightMode} />\n\t\t\t<Routes>\n\t\t\t\t<Route exact path=\"/\" element={<Home user={user} setUser={setUser} nightMode={nightMode} />} />\n\t\t\t\t<Route exact path=\"/search/:searchQuery\" element={<Search nightMode={nightMode} />} />\n\t\t\t\t<Route path=\"/r/:slug\" element={<Subreddit user={user} setUser={setUser} nightMode={nightMode} />}>\n\t\t\t\t\t{/* Nested route for Post component using relative path */}\n\t\t\t\t\t<Route exact path=\"comments/:postId/:postTitle\" element={<Post user={user} setUser={setUser} nightMode={nightMode} />} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/r/:slug/submit\" element={<Submit user={user} nightMode={nightMode} />} />\n\t\t\t</Routes>\n\t\t\t<Footer nightMode={nightMode} />\n\t\t</HashRouter>\n\t);\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}